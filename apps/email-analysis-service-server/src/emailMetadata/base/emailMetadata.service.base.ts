/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EmailMetadata as PrismaEmailMetadata } from "@prisma/client";

export class EmailMetadataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmailMetadataCountArgs, "select">
  ): Promise<number> {
    return this.prisma.emailMetadata.count(args);
  }

  async emailMetadataItems(
    args: Prisma.EmailMetadataFindManyArgs
  ): Promise<PrismaEmailMetadata[]> {
    return this.prisma.emailMetadata.findMany(args);
  }
  async emailMetadata(
    args: Prisma.EmailMetadataFindUniqueArgs
  ): Promise<PrismaEmailMetadata | null> {
    return this.prisma.emailMetadata.findUnique(args);
  }
  async createEmailMetadata(
    args: Prisma.EmailMetadataCreateArgs
  ): Promise<PrismaEmailMetadata> {
    return this.prisma.emailMetadata.create(args);
  }
  async updateEmailMetadata(
    args: Prisma.EmailMetadataUpdateArgs
  ): Promise<PrismaEmailMetadata> {
    return this.prisma.emailMetadata.update(args);
  }
  async deleteEmailMetadata(
    args: Prisma.EmailMetadataDeleteArgs
  ): Promise<PrismaEmailMetadata> {
    return this.prisma.emailMetadata.delete(args);
  }
}
