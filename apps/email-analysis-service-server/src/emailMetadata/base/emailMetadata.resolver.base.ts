/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmailMetadata } from "./EmailMetadata";
import { EmailMetadataCountArgs } from "./EmailMetadataCountArgs";
import { EmailMetadataFindManyArgs } from "./EmailMetadataFindManyArgs";
import { EmailMetadataFindUniqueArgs } from "./EmailMetadataFindUniqueArgs";
import { CreateEmailMetadataArgs } from "./CreateEmailMetadataArgs";
import { UpdateEmailMetadataArgs } from "./UpdateEmailMetadataArgs";
import { DeleteEmailMetadataArgs } from "./DeleteEmailMetadataArgs";
import { EmailMetadataService } from "../emailMetadata.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmailMetadata)
export class EmailMetadataResolverBase {
  constructor(
    protected readonly service: EmailMetadataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmailMetadata",
    action: "read",
    possession: "any",
  })
  async _emailMetadataItemsMeta(
    @graphql.Args() args: EmailMetadataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmailMetadata])
  @nestAccessControl.UseRoles({
    resource: "EmailMetadata",
    action: "read",
    possession: "any",
  })
  async emailMetadataItems(
    @graphql.Args() args: EmailMetadataFindManyArgs
  ): Promise<EmailMetadata[]> {
    return this.service.emailMetadataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmailMetadata, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmailMetadata",
    action: "read",
    possession: "own",
  })
  async emailMetadata(
    @graphql.Args() args: EmailMetadataFindUniqueArgs
  ): Promise<EmailMetadata | null> {
    const result = await this.service.emailMetadata(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmailMetadata)
  @nestAccessControl.UseRoles({
    resource: "EmailMetadata",
    action: "create",
    possession: "any",
  })
  async createEmailMetadata(
    @graphql.Args() args: CreateEmailMetadataArgs
  ): Promise<EmailMetadata> {
    return await this.service.createEmailMetadata({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmailMetadata)
  @nestAccessControl.UseRoles({
    resource: "EmailMetadata",
    action: "update",
    possession: "any",
  })
  async updateEmailMetadata(
    @graphql.Args() args: UpdateEmailMetadataArgs
  ): Promise<EmailMetadata | null> {
    try {
      return await this.service.updateEmailMetadata({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmailMetadata)
  @nestAccessControl.UseRoles({
    resource: "EmailMetadata",
    action: "delete",
    possession: "any",
  })
  async deleteEmailMetadata(
    @graphql.Args() args: DeleteEmailMetadataArgs
  ): Promise<EmailMetadata | null> {
    try {
      return await this.service.deleteEmailMetadata(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
