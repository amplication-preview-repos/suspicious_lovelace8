/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OAuthToken } from "./OAuthToken";
import { OAuthTokenCountArgs } from "./OAuthTokenCountArgs";
import { OAuthTokenFindManyArgs } from "./OAuthTokenFindManyArgs";
import { OAuthTokenFindUniqueArgs } from "./OAuthTokenFindUniqueArgs";
import { CreateOAuthTokenArgs } from "./CreateOAuthTokenArgs";
import { UpdateOAuthTokenArgs } from "./UpdateOAuthTokenArgs";
import { DeleteOAuthTokenArgs } from "./DeleteOAuthTokenArgs";
import { OAuthTokenService } from "../oAuthToken.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OAuthToken)
export class OAuthTokenResolverBase {
  constructor(
    protected readonly service: OAuthTokenService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OAuthToken",
    action: "read",
    possession: "any",
  })
  async _oAuthTokensMeta(
    @graphql.Args() args: OAuthTokenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OAuthToken])
  @nestAccessControl.UseRoles({
    resource: "OAuthToken",
    action: "read",
    possession: "any",
  })
  async oAuthTokens(
    @graphql.Args() args: OAuthTokenFindManyArgs
  ): Promise<OAuthToken[]> {
    return this.service.oAuthTokens(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OAuthToken, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OAuthToken",
    action: "read",
    possession: "own",
  })
  async oAuthToken(
    @graphql.Args() args: OAuthTokenFindUniqueArgs
  ): Promise<OAuthToken | null> {
    const result = await this.service.oAuthToken(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OAuthToken)
  @nestAccessControl.UseRoles({
    resource: "OAuthToken",
    action: "create",
    possession: "any",
  })
  async createOAuthToken(
    @graphql.Args() args: CreateOAuthTokenArgs
  ): Promise<OAuthToken> {
    return await this.service.createOAuthToken({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OAuthToken)
  @nestAccessControl.UseRoles({
    resource: "OAuthToken",
    action: "update",
    possession: "any",
  })
  async updateOAuthToken(
    @graphql.Args() args: UpdateOAuthTokenArgs
  ): Promise<OAuthToken | null> {
    try {
      return await this.service.updateOAuthToken({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OAuthToken)
  @nestAccessControl.UseRoles({
    resource: "OAuthToken",
    action: "delete",
    possession: "any",
  })
  async deleteOAuthToken(
    @graphql.Args() args: DeleteOAuthTokenArgs
  ): Promise<OAuthToken | null> {
    try {
      return await this.service.deleteOAuthToken(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
